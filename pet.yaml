openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
  - name: order
    description: Operations about order
  - name: category
    description: Operations about category
  - name: product
    description: Operations about product
    
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Pet'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Pet'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - pet
      summary: Get list of all pets
      description: Returns list of pets
      operationId: getPetList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Pet'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Pet'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /user:
    put:
      tags:
        - user
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      requestBody:
        description: Update an existent user in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'            
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
    post:
      tags:
        - user
      summary: Add a new user to the user
      description: Add a new user to the user
      operationId: addUser
      requestBody:
        description: Create a new user in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'         
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    get:
      tags:
        - user
      summary: Get list of all users
      description: Returns list of users
      operationId: getUserList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'         
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /user/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/User'            
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Deletes a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/User'            
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user value
      
  /order:
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Order'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '405':
          description: Validation exception
    post:
      tags:
        - order
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Order'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
    get:
      tags:
        - order
      summary: Get list of all orders
      description: Returns list of orders
      operationId: getOrderList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Order'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - order
      summary: Deletes a order
      description: delete a order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Order'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order value

  /category:
    put:
      tags:
        - category
      summary: Update an existing category
      description: Update an existing category by Id
      operationId: updateCategory
      requestBody:
        description: Update an existent category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '405':
          description: Validation exception
    post:
      tags:
        - category
      summary: Add a new category to the store
      description: Add a new category to the store
      operationId: addCategory
      requestBody:
        description: Create a new category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '405':
          description: Invalid input
    get:
      tags:
        - category
      summary: Get list of all categories
      description: Returns list of categories
      operationId: getCategoryList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Find category by ID
      description: Returns a single category
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Category'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
    delete:
      tags:
        - category
      summary: Deletes a category
      description: delete a category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: Category id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Category'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid category value
  
  /product:
    put:
      tags:
        - product
      summary: Update an existing Product
      description: Update an existing Product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent Product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception
    post:
      tags:
        - product
      summary: Add a new Product to the store
      description: Add a new Product to the store
      operationId: addProduct
      requestBody:
        description: Create a new Product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
    get:
      tags:
        - product
      summary: Get list of all products
      description: Returns list of products
      operationId: getProductList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /product/{productId}:
    get:
      tags:
        - product
      summary: Find Product by ID
      description: Returns a single Product
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: ID of Product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
               schema:
                  $ref: '#/components/schemas/Product'            
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - product
      summary: Deletes a Product
      description: delete a Product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Product'         
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid Product value

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dog
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@xyz.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
      xml:
        name: user
    Pet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        breed:
          type: string
          example: pug
        age:
          type: integer
          format: int64
          example: 2
        price:
          type: integer
          format: int64
          example: 10  
      xml:
        name: pet
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: dogFood
        quantity:
          type: integer
          format: int64
          example: 10
        price:
          type: integer
          format: int64
          example: 10  
      
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    Order:
      description: Order object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
    User:
      description: User object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
    Category:
      description: Category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
        application/xml:
          schema:
            $ref: '#/components/schemas/Category'
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

