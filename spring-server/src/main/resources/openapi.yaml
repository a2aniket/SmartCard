openapi: 3.0.3
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.11
servers:
- url: https://petstore3.swagger.io/api/v3
tags:
- description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: pet
- description: Operations about user
  name: user
- description: Operations about order
  name: order
- description: Operations about category
  name: category
- description: Operations about product
  name: product
paths:
  /pet:
    get:
      description: Returns list of pets
      operationId: getPetList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Get list of all pets
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
    post:
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Create a new pet in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Add a new pet to the store
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: pet
    put:
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Update an existent pet in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Update an existing pet
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/{petId}:
    delete:
      description: delete a pet
      operationId: deletePet
      parameters:
      - description: Pet id to delete
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Deletes a pet
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
    get:
      description: Returns a single pet
      operationId: getPet
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Find pet by ID
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
  /user:
    get:
      description: Returns list of users
      operationId: getUserList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      summary: Get list of all users
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    post:
      description: Add a new user to the user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Create a new user in the user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new user to the user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
    put:
      description: Update an existing user by Id
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
      summary: Update an existing user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/{userId}:
    delete:
      description: delete a user
      operationId: deleteUser
      parameters:
      - description: User id to delete
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid user value
      summary: Deletes a user
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    get:
      description: Returns a single user
      operationId: getUser
      parameters:
      - description: ID of user to return
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      summary: Find user by ID
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /order:
    get:
      description: Returns list of orders
      operationId: getOrderList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Get list of all orders
      tags:
      - order
      x-accepts: application/json
      x-tags:
      - tag: order
    post:
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        description: Create a new order in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new order to the store
      tags:
      - order
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: order
    put:
      description: Update an existing order by Id
      operationId: updateOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        description: Update an existent order in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "405":
          description: Validation exception
      summary: Update an existing order
      tags:
      - order
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: order
  /order/{orderId}:
    delete:
      description: delete a order
      operationId: deleteOrder
      parameters:
      - description: Order id to delete
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid order value
      summary: Deletes a order
      tags:
      - order
      x-accepts: application/json
      x-tags:
      - tag: order
    get:
      description: Returns a single order
      operationId: getOrder
      parameters:
      - description: ID of order to return
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find order by ID
      tags:
      - order
      x-accepts: application/json
      x-tags:
      - tag: order
  /category:
    get:
      description: Returns list of categories
      operationId: getCategoryList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
      summary: Get list of all categories
      tags:
      - category
      x-accepts: application/json
      x-tags:
      - tag: category
    post:
      description: Add a new category to the store
      operationId: addCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: Create a new category in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new category to the store
      tags:
      - category
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: category
    put:
      description: Update an existing category by Id
      operationId: updateCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: Update an existent category in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
        "405":
          description: Validation exception
      summary: Update an existing category
      tags:
      - category
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: category
  /category/{categoryId}:
    delete:
      description: delete a category
      operationId: deleteCategory
      parameters:
      - description: Category id to delete
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
          description: successful operation
        "400":
          description: Invalid category value
      summary: Deletes a category
      tags:
      - category
      x-accepts: application/json
      x-tags:
      - tag: category
    get:
      description: Returns a single category
      operationId: getCategory
      parameters:
      - description: ID of category to return
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
      summary: Find category by ID
      tags:
      - category
      x-accepts: application/json
      x-tags:
      - tag: category
  /product:
    get:
      description: Returns list of products
      operationId: getProductList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      summary: Get list of all products
      tags:
      - product
      x-accepts: application/json
      x-tags:
      - tag: product
    post:
      description: Add a new Product to the store
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        description: Create a new Product in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new Product to the store
      tags:
      - product
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: product
    put:
      description: Update an existing Product by Id
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        description: Update an existent Product in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "405":
          description: Validation exception
      summary: Update an existing Product
      tags:
      - product
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: product
  /product/{productId}:
    delete:
      description: delete a Product
      operationId: deleteProduct
      parameters:
      - description: Product id to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: Successful operation
        "400":
          description: Invalid Product value
      summary: Deletes a Product
      tags:
      - product
      x-accepts: application/json
      x-tags:
      - tag: product
    get:
      description: Returns a single Product
      operationId: getProduct
      parameters:
      - description: ID of Product to return
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      summary: Find Product by ID
      tags:
      - product
      x-accepts: application/json
      x-tags:
      - tag: product
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
      description: Order object that needs to be added to the store
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      description: User object that needs to be added to the store
    Category:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
        application/xml:
          schema:
            $ref: '#/components/schemas/Category'
      description: Category object that needs to be added to the store
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
      description: Product object that needs to be added to the store
  schemas:
    Order:
      example:
        quantity: 7
        id: 1
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: true
      properties:
        id:
          example: 1
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        complete:
          type: boolean
      type: object
      xml:
        name: order
    Category:
      example:
        name: Dog
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Dog
          type: string
      type: object
      xml:
        name: category
    User:
      example:
        firstName: John
        lastName: James
        password: "12345"
        phone: "12345"
        id: 1
        email: john@xyz.com
        username: theUser
      properties:
        id:
          example: 1
          format: int64
          type: integer
        username:
          example: theUser
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: James
          type: string
        email:
          example: john@xyz.com
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
      type: object
      xml:
        name: user
    Pet:
      example:
        price: 10
        name: doggie
        id: 10
        breed: pug
        age: 2
      properties:
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        breed:
          example: pug
          type: string
        age:
          example: 2
          format: int64
          type: integer
        price:
          example: 10
          format: int64
          type: integer
      required:
      - name
      type: object
      xml:
        name: pet
    Product:
      example:
        quantity: 10
        price: 10
        name: dogFood
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: dogFood
          type: string
        quantity:
          example: 10
          format: int64
          type: integer
        price:
          example: 10
          format: int64
          type: integer
      type: object
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
