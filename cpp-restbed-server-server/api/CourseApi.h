/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CourseApi.h
 *
 * 
 */

#ifndef CourseApi_H_
#define CourseApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Course.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CourseApiException: public std::exception
{
public:
    CourseApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CourseApiResources {
/// <summary>
/// Add a new course
/// </summary>
/// <remarks>
/// Add a new course
/// </remarks>
class  CourseResource: public restbed::Resource
{
public:
    CourseResource(const std::string& context = "/api/v3");
    virtual ~CourseResource() = default;

    CourseResource(
        const CourseResource& other) = default; // copy constructor
    CourseResource(CourseResource&& other) noexcept = default; // move constructor

    CourseResource& operator=(const CourseResource& other) = default; // copy assignment
    CourseResource& operator=(CourseResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Course>(
        Course & course)> handler_POST_func =
            [](Course &) -> std::pair<int, Course>
                { throw CourseApiException(501, "Not implemented"); };

    std::function<std::pair<int, std::vector<Course>>(
        )> handler_GET_func =
            []() -> std::pair<int, std::vector<Course>>
                { throw CourseApiException(501, "Not implemented"); };

    std::function<std::pair<int, Course>(
        Course & course)> handler_PUT_func =
            [](Course &) -> std::pair<int, Course>
                { throw CourseApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Course> handler_POST(
        Course & course);

    virtual std::pair<int, std::vector<Course>> handler_GET(
        );
    virtual std::pair<int, Course> handler_PUT(
        Course & course);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCourseApiException(const CourseApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Deletes a course
/// </summary>
/// <remarks>
/// delete a course
/// </remarks>
class  CourseCourseIdResource: public restbed::Resource
{
public:
    CourseCourseIdResource(const std::string& context = "/api/v3");
    virtual ~CourseCourseIdResource() = default;

    CourseCourseIdResource(
        const CourseCourseIdResource& other) = default; // copy constructor
    CourseCourseIdResource(CourseCourseIdResource&& other) noexcept = default; // move constructor

    CourseCourseIdResource& operator=(const CourseCourseIdResource& other) = default; // copy assignment
    CourseCourseIdResource& operator=(CourseCourseIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Course>(
        int64_t & courseId)> handler_DELETE_func =
            [](int64_t &) -> std::pair<int, Course>
                { throw CourseApiException(501, "Not implemented"); };

    std::function<std::pair<int, Course>(
        int64_t & courseId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, Course>
                { throw CourseApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Course> handler_DELETE(
        int64_t & courseId);

    virtual std::pair<int, Course> handler_GET(
        int64_t & courseId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCourseApiException(const CourseApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CourseApiResources */

using CourseApiCourseResource [[deprecated]] = CourseApiResources::CourseResource;
using CourseApiCourseCourseIdResource [[deprecated]] = CourseApiResources::CourseCourseIdResource;

//
// The restbed service to actually implement the REST server
//
class  CourseApi
{
public:
    explicit CourseApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~CourseApi();

    std::shared_ptr<CourseApiResources::CourseResource> getCourseResource();
    std::shared_ptr<CourseApiResources::CourseCourseIdResource> getCourseCourseIdResource();

    void setResource(std::shared_ptr<CourseApiResources::CourseResource> resource);
    void setResource(std::shared_ptr<CourseApiResources::CourseCourseIdResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCourseApiCourseResource(std::shared_ptr<CourseApiResources::CourseResource> spCourseApiCourseResource);
    [[deprecated("use setResource()")]]
    virtual void setCourseApiCourseCourseIdResource(std::shared_ptr<CourseApiResources::CourseCourseIdResource> spCourseApiCourseCourseIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<CourseApiResources::CourseResource> m_spCourseResource;
	std::shared_ptr<CourseApiResources::CourseCourseIdResource> m_spCourseCourseIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CourseApi_H_ */

