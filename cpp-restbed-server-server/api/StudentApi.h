/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StudentApi.h
 *
 * 
 */

#ifndef StudentApi_H_
#define StudentApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Student.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  StudentApiException: public std::exception
{
public:
    StudentApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace StudentApiResources {
/// <summary>
/// Add a new student
/// </summary>
/// <remarks>
/// Add a new student
/// </remarks>
class  StudentResource: public restbed::Resource
{
public:
    StudentResource(const std::string& context = "/api/v3");
    virtual ~StudentResource() = default;

    StudentResource(
        const StudentResource& other) = default; // copy constructor
    StudentResource(StudentResource&& other) noexcept = default; // move constructor

    StudentResource& operator=(const StudentResource& other) = default; // copy assignment
    StudentResource& operator=(StudentResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Student>(
        Student & student)> handler_POST_func =
            [](Student &) -> std::pair<int, Student>
                { throw StudentApiException(501, "Not implemented"); };

    std::function<std::pair<int, std::vector<Student>>(
        )> handler_GET_func =
            []() -> std::pair<int, std::vector<Student>>
                { throw StudentApiException(501, "Not implemented"); };

    std::function<std::pair<int, Student>(
        Student & student)> handler_PUT_func =
            [](Student &) -> std::pair<int, Student>
                { throw StudentApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Student> handler_POST(
        Student & student);

    virtual std::pair<int, std::vector<Student>> handler_GET(
        );
    virtual std::pair<int, Student> handler_PUT(
        Student & student);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleStudentApiException(const StudentApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Deletes a student
/// </summary>
/// <remarks>
/// delete a student
/// </remarks>
class  StudentStudentIdResource: public restbed::Resource
{
public:
    StudentStudentIdResource(const std::string& context = "/api/v3");
    virtual ~StudentStudentIdResource() = default;

    StudentStudentIdResource(
        const StudentStudentIdResource& other) = default; // copy constructor
    StudentStudentIdResource(StudentStudentIdResource&& other) noexcept = default; // move constructor

    StudentStudentIdResource& operator=(const StudentStudentIdResource& other) = default; // copy assignment
    StudentStudentIdResource& operator=(StudentStudentIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Student>(
        int64_t & studentId)> handler_DELETE_func =
            [](int64_t &) -> std::pair<int, Student>
                { throw StudentApiException(501, "Not implemented"); };

    std::function<std::pair<int, Student>(
        int64_t & studentId)> handler_GET_func =
            [](int64_t &) -> std::pair<int, Student>
                { throw StudentApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Student> handler_DELETE(
        int64_t & studentId);

    virtual std::pair<int, Student> handler_GET(
        int64_t & studentId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleStudentApiException(const StudentApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace StudentApiResources */

using StudentApiStudentResource [[deprecated]] = StudentApiResources::StudentResource;
using StudentApiStudentStudentIdResource [[deprecated]] = StudentApiResources::StudentStudentIdResource;

//
// The restbed service to actually implement the REST server
//
class  StudentApi
{
public:
    explicit StudentApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~StudentApi();

    std::shared_ptr<StudentApiResources::StudentResource> getStudentResource();
    std::shared_ptr<StudentApiResources::StudentStudentIdResource> getStudentStudentIdResource();

    void setResource(std::shared_ptr<StudentApiResources::StudentResource> resource);
    void setResource(std::shared_ptr<StudentApiResources::StudentStudentIdResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setStudentApiStudentResource(std::shared_ptr<StudentApiResources::StudentResource> spStudentApiStudentResource);
    [[deprecated("use setResource()")]]
    virtual void setStudentApiStudentStudentIdResource(std::shared_ptr<StudentApiResources::StudentStudentIdResource> spStudentApiStudentStudentIdResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<StudentApiResources::StudentResource> m_spStudentResource;
	std::shared_ptr<StudentApiResources::StudentStudentIdResource> m_spStudentStudentIdResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* StudentApi_H_ */

