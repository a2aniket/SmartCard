/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Student.h
 *
 * 
 */

#ifndef Student_H_
#define Student_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Student 
{
public:
    Student() = default;
    explicit Student(boost::property_tree::ptree const& pt);
    virtual ~Student() = default;

    Student(const Student& other) = default; // copy constructor
    Student(Student&& other) noexcept = default; // move constructor

    Student& operator=(const Student& other) = default; // copy assignment
    Student& operator=(Student&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Student members

    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAddress() const;
    void setAddress(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPhone() const;
    void setPhone(std::string value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    std::string m_Address = "";
    std::string m_Email = "";
    std::string m_Phone = "";
};

std::vector<Student> createStudentVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Student>(const Student& val) {
    return val.toPropertyTree();
}

template<>
inline Student fromPt<Student>(const boost::property_tree::ptree& pt) {
    Student ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Student_H_ */
