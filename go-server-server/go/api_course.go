/*
 * Swagger Student Management System - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CourseApiController binds http requests to an api service and writes the service results to the http response
type CourseApiController struct {
	service CourseApiServicer
	errorHandler ErrorHandler
}

// CourseApiOption for how the controller is set up.
type CourseApiOption func(*CourseApiController)

// WithCourseApiErrorHandler inject ErrorHandler into controller
func WithCourseApiErrorHandler(h ErrorHandler) CourseApiOption {
	return func(c *CourseApiController) {
		c.errorHandler = h
	}
}

// NewCourseApiController creates a default api controller
func NewCourseApiController(s CourseApiServicer, opts ...CourseApiOption) Router {
	controller := &CourseApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CourseApiController
func (c *CourseApiController) Routes() Routes {
	return Routes{ 
		{
			"AddCourse",
			strings.ToUpper("Post"),
			"/api/v3/course",
			c.AddCourse,
		},
		{
			"DeleteCourse",
			strings.ToUpper("Delete"),
			"/api/v3/course/{courseId}",
			c.DeleteCourse,
		},
		{
			"GetCourse",
			strings.ToUpper("Get"),
			"/api/v3/course/{courseId}",
			c.GetCourse,
		},
		{
			"GetCourseList",
			strings.ToUpper("Get"),
			"/api/v3/course",
			c.GetCourseList,
		},
		{
			"UpdateCourse",
			strings.ToUpper("Put"),
			"/api/v3/course",
			c.UpdateCourse,
		},
	}
}

// AddCourse - Add a new course
func (c *CourseApiController) AddCourse(w http.ResponseWriter, r *http.Request) {
	courseParam := Course{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&courseParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCourseRequired(courseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCourse(r.Context(), courseParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteCourse - Deletes a course
func (c *CourseApiController) DeleteCourse(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	courseIdParam, err := parseInt64Parameter(params["courseId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteCourse(r.Context(), courseIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetCourse - Find course by ID
func (c *CourseApiController) GetCourse(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	courseIdParam, err := parseInt64Parameter(params["courseId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetCourse(r.Context(), courseIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetCourseList - Get list of all courses
func (c *CourseApiController) GetCourseList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCourseList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateCourse - Update an existing course
func (c *CourseApiController) UpdateCourse(w http.ResponseWriter, r *http.Request) {
	courseParam := Course{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&courseParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCourseRequired(courseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCourse(r.Context(), courseParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
