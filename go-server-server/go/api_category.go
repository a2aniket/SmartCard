/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CategoryApiController binds http requests to an api service and writes the service results to the http response
type CategoryApiController struct {
	service CategoryApiServicer
	errorHandler ErrorHandler
}

// CategoryApiOption for how the controller is set up.
type CategoryApiOption func(*CategoryApiController)

// WithCategoryApiErrorHandler inject ErrorHandler into controller
func WithCategoryApiErrorHandler(h ErrorHandler) CategoryApiOption {
	return func(c *CategoryApiController) {
		c.errorHandler = h
	}
}

// NewCategoryApiController creates a default api controller
func NewCategoryApiController(s CategoryApiServicer, opts ...CategoryApiOption) Router {
	controller := &CategoryApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CategoryApiController
func (c *CategoryApiController) Routes() Routes {
	return Routes{ 
		{
			"AddCategory",
			strings.ToUpper("Post"),
			"/api/v3/category",
			c.AddCategory,
		},
		{
			"DeleteCategory",
			strings.ToUpper("Delete"),
			"/api/v3/category/{categoryId}",
			c.DeleteCategory,
		},
		{
			"GetCategory",
			strings.ToUpper("Get"),
			"/api/v3/category/{categoryId}",
			c.GetCategory,
		},
		{
			"GetCategoryList",
			strings.ToUpper("Get"),
			"/api/v3/category",
			c.GetCategoryList,
		},
		{
			"UpdateCategory",
			strings.ToUpper("Put"),
			"/api/v3/category",
			c.UpdateCategory,
		},
	}
}

// AddCategory - Add a new category to the store
func (c *CategoryApiController) AddCategory(w http.ResponseWriter, r *http.Request) {
	categoryParam := Category{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&categoryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCategoryRequired(categoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCategory(r.Context(), categoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteCategory - Deletes a category
func (c *CategoryApiController) DeleteCategory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	categoryIdParam, err := parseInt64Parameter(params["categoryId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteCategory(r.Context(), categoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetCategory - Find category by ID
func (c *CategoryApiController) GetCategory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	categoryIdParam, err := parseInt64Parameter(params["categoryId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetCategory(r.Context(), categoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetCategoryList - Get list of all categories
func (c *CategoryApiController) GetCategoryList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCategoryList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateCategory - Update an existing category
func (c *CategoryApiController) UpdateCategory(w http.ResponseWriter, r *http.Request) {
	categoryParam := Category{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&categoryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCategoryRequired(categoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCategory(r.Context(), categoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
