/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// CategoryApiRouter defines the required methods for binding the api requests to a responses for the CategoryApi
// The CategoryApiRouter implementation should parse necessary information from the http request,
// pass the data to a CategoryApiServicer to perform the required actions, then write the service results to the http response.
type CategoryApiRouter interface { 
	AddCategory(http.ResponseWriter, *http.Request)
	DeleteCategory(http.ResponseWriter, *http.Request)
	GetCategory(http.ResponseWriter, *http.Request)
	GetCategoryList(http.ResponseWriter, *http.Request)
	UpdateCategory(http.ResponseWriter, *http.Request)
}
// OrderApiRouter defines the required methods for binding the api requests to a responses for the OrderApi
// The OrderApiRouter implementation should parse necessary information from the http request,
// pass the data to a OrderApiServicer to perform the required actions, then write the service results to the http response.
type OrderApiRouter interface { 
	AddOrder(http.ResponseWriter, *http.Request)
	DeleteOrder(http.ResponseWriter, *http.Request)
	GetOrder(http.ResponseWriter, *http.Request)
	GetOrderList(http.ResponseWriter, *http.Request)
	UpdateOrder(http.ResponseWriter, *http.Request)
}
// PetApiRouter defines the required methods for binding the api requests to a responses for the PetApi
// The PetApiRouter implementation should parse necessary information from the http request,
// pass the data to a PetApiServicer to perform the required actions, then write the service results to the http response.
type PetApiRouter interface { 
	AddPet(http.ResponseWriter, *http.Request)
	DeletePet(http.ResponseWriter, *http.Request)
	GetPet(http.ResponseWriter, *http.Request)
	GetPetList(http.ResponseWriter, *http.Request)
	UpdatePet(http.ResponseWriter, *http.Request)
}
// ProductApiRouter defines the required methods for binding the api requests to a responses for the ProductApi
// The ProductApiRouter implementation should parse necessary information from the http request,
// pass the data to a ProductApiServicer to perform the required actions, then write the service results to the http response.
type ProductApiRouter interface { 
	AddProduct(http.ResponseWriter, *http.Request)
	DeleteProduct(http.ResponseWriter, *http.Request)
	GetProduct(http.ResponseWriter, *http.Request)
	GetProductList(http.ResponseWriter, *http.Request)
	UpdateProduct(http.ResponseWriter, *http.Request)
}
// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request,
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface { 
	AddUser(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUserList(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
}


// CategoryApiServicer defines the api actions for the CategoryApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CategoryApiServicer interface { 
	AddCategory(context.Context, Category) (ImplResponse, error)
	DeleteCategory(context.Context, int64) (ImplResponse, error)
	GetCategory(context.Context, int64) (ImplResponse, error)
	GetCategoryList(context.Context) (ImplResponse, error)
	UpdateCategory(context.Context, Category) (ImplResponse, error)
}


// OrderApiServicer defines the api actions for the OrderApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OrderApiServicer interface { 
	AddOrder(context.Context, Order) (ImplResponse, error)
	DeleteOrder(context.Context, int64) (ImplResponse, error)
	GetOrder(context.Context, int64) (ImplResponse, error)
	GetOrderList(context.Context) (ImplResponse, error)
	UpdateOrder(context.Context, Order) (ImplResponse, error)
}


// PetApiServicer defines the api actions for the PetApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PetApiServicer interface { 
	AddPet(context.Context, Pet) (ImplResponse, error)
	DeletePet(context.Context, int64) (ImplResponse, error)
	GetPet(context.Context, int64) (ImplResponse, error)
	GetPetList(context.Context) (ImplResponse, error)
	UpdatePet(context.Context, Pet) (ImplResponse, error)
}


// ProductApiServicer defines the api actions for the ProductApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProductApiServicer interface { 
	AddProduct(context.Context, Product) (ImplResponse, error)
	DeleteProduct(context.Context, int64) (ImplResponse, error)
	GetProduct(context.Context, int64) (ImplResponse, error)
	GetProductList(context.Context) (ImplResponse, error)
	UpdateProduct(context.Context, Product) (ImplResponse, error)
}


// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserApiServicer interface { 
	AddUser(context.Context, User) (ImplResponse, error)
	DeleteUser(context.Context, int64) (ImplResponse, error)
	GetUser(context.Context, int64) (ImplResponse, error)
	GetUserList(context.Context) (ImplResponse, error)
	UpdateUser(context.Context, User) (ImplResponse, error)
}
