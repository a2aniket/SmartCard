/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Course from '../model/Course';

/**
* Course service.
* @module api/CourseApi
* @version 1.0.11
*/
export default class CourseApi {

    /**
    * Constructs a new CourseApi. 
    * @alias module:api/CourseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCourse operation.
     * @callback module:api/CourseApi~addCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new course
     * Add a new course
     * @param {module:model/Course} course Create a new course
     * @param {module:api/CourseApi~addCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    addCourse(course, callback) {
      let postBody = course;
      // verify the required parameter 'course' is set
      if (course === undefined || course === null) {
        throw new Error("Missing the required parameter 'course' when calling addCourse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourse operation.
     * @callback module:api/CourseApi~deleteCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a course
     * delete a course
     * @param {Number} courseId Course id to delete
     * @param {module:api/CourseApi~deleteCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    deleteCourse(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourse");
      }

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourse operation.
     * @callback module:api/CourseApi~getCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find course by ID
     * Returns a single course
     * @param {Number} courseId ID of course to return
     * @param {module:api/CourseApi~getCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    getCourse(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourse");
      }

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course/{courseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseList operation.
     * @callback module:api/CourseApi~getCourseListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Course>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all courses
     * Returns list of courses
     * @param {module:api/CourseApi~getCourseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Course>}
     */
    getCourseList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Course];
      return this.apiClient.callApi(
        '/course', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCourse operation.
     * @callback module:api/CourseApi~updateCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing course
     * Update an existing course by Id
     * @param {module:model/Course} course Update an existent course
     * @param {module:api/CourseApi~updateCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    updateCourse(course, callback) {
      let postBody = course;
      // verify the required parameter 'course' is set
      if (course === undefined || course === null) {
        throw new Error("Missing the required parameter 'course' when calling updateCourse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
