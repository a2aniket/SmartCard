/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Student from '../model/Student';

/**
* Student service.
* @module api/StudentApi
* @version 1.0.11
*/
export default class StudentApi {

    /**
    * Constructs a new StudentApi. 
    * @alias module:api/StudentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStudent operation.
     * @callback module:api/StudentApi~addStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new student
     * Add a new student
     * @param {module:model/Student} student Create a new student
     * @param {module:api/StudentApi~addStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Student}
     */
    addStudent(student, callback) {
      let postBody = student;
      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling addStudent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Student;
      return this.apiClient.callApi(
        '/student', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudent operation.
     * @callback module:api/StudentApi~deleteStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a student
     * delete a student
     * @param {Number} studentId Student id to delete
     * @param {module:api/StudentApi~deleteStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Student}
     */
    deleteStudent(studentId, callback) {
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling deleteStudent");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Student;
      return this.apiClient.callApi(
        '/student/{studentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudent operation.
     * @callback module:api/StudentApi~getStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find student by ID
     * Returns a single student
     * @param {Number} studentId ID of student to return
     * @param {module:api/StudentApi~getStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Student}
     */
    getStudent(studentId, callback) {
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling getStudent");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Student;
      return this.apiClient.callApi(
        '/student/{studentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudentList operation.
     * @callback module:api/StudentApi~getStudentListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Student>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all students
     * Returns list of students
     * @param {module:api/StudentApi~getStudentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Student>}
     */
    getStudentList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Student];
      return this.apiClient.callApi(
        '/student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStudent operation.
     * @callback module:api/StudentApi~updateStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing student
     * Update an existing student by Id
     * @param {module:model/Student} student Update an existent student
     * @param {module:api/StudentApi~updateStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Student}
     */
    updateStudent(student, callback) {
      let postBody = student;
      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling updateStudent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Student;
      return this.apiClient.callApi(
        '/student', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
