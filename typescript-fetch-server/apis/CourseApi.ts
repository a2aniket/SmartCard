/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Course,
} from '../models';
import {
    CourseFromJSON,
    CourseToJSON,
} from '../models';

export interface AddCourseRequest {
    course: Course;
}

export interface DeleteCourseRequest {
    courseId: number;
}

export interface GetCourseRequest {
    courseId: number;
}

export interface UpdateCourseRequest {
    course: Course;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     * Add a new course
     * Add a new course
     */
    async addCourseRaw(requestParameters: AddCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling addCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseToJSON(requestParameters.course),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Add a new course
     * Add a new course
     */
    async addCourse(requestParameters: AddCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.addCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a course
     * Deletes a course
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
            throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling deleteCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * delete a course
     * Deletes a course
     */
    async deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.deleteCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single course
     * Find course by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
            throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling getCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Returns a single course
     * Find course by ID
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of courses
     * Get list of all courses
     */
    async getCourseListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Course>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseFromJSON));
    }

    /**
     * Returns list of courses
     * Get list of all courses
     */
    async getCourseList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Course>> {
        const response = await this.getCourseListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing course by Id
     * Update an existing course
     */
    async updateCourseRaw(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling updateCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CourseToJSON(requestParameters.course),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Update an existing course by Id
     * Update an existing course
     */
    async updateCourse(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.updateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
