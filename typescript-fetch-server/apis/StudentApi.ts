/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Student Management System - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Student,
} from '../models';
import {
    StudentFromJSON,
    StudentToJSON,
} from '../models';

export interface AddStudentRequest {
    student: Student;
}

export interface DeleteStudentRequest {
    studentId: number;
}

export interface GetStudentRequest {
    studentId: number;
}

export interface UpdateStudentRequest {
    student: Student;
}

/**
 * 
 */
export class StudentApi extends runtime.BaseAPI {

    /**
     * Add a new student
     * Add a new student
     */
    async addStudentRaw(requestParameters: AddStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.student === null || requestParameters.student === undefined) {
            throw new runtime.RequiredError('student','Required parameter requestParameters.student was null or undefined when calling addStudent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/student`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentToJSON(requestParameters.student),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Add a new student
     * Add a new student
     */
    async addStudent(requestParameters: AddStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.addStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a student
     * Deletes a student
     */
    async deleteStudentRaw(requestParameters: DeleteStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling deleteStudent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/student/{studentId}`.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters.studentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * delete a student
     * Deletes a student
     */
    async deleteStudent(requestParameters: DeleteStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.deleteStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single student
     * Find student by ID
     */
    async getStudentRaw(requestParameters: GetStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling getStudent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/student/{studentId}`.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters.studentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Returns a single student
     * Find student by ID
     */
    async getStudent(requestParameters: GetStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.getStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of students
     * Get list of all students
     */
    async getStudentListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Student>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/student`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudentFromJSON));
    }

    /**
     * Returns list of students
     * Get list of all students
     */
    async getStudentList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Student>> {
        const response = await this.getStudentListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing student by Id
     * Update an existing student
     */
    async updateStudentRaw(requestParameters: UpdateStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.student === null || requestParameters.student === undefined) {
            throw new runtime.RequiredError('student','Required parameter requestParameters.student was null or undefined when calling updateStudent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/student`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StudentToJSON(requestParameters.student),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Update an existing student by Id
     * Update an existing student
     */
    async updateStudent(requestParameters: UpdateStudentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Student> {
        const response = await this.updateStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
